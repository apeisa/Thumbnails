<?php
class ProcessCropImage extends Process implements ConfigurableModule  {

	public static function getModuleInfo() {
		return array(
			'title' => __('Image cropping tool', __FILE__), // Module Title
			'summary' => __('Crop thumbnails (Configuration Settings moved to CropImage field settings).', __FILE__), // Module Summary
			'href' => 'http://processwire.com/talk/index.php/topic,705.0.html',
			'version' => 101,
			'permanent' => false,
			'autoload' => false,
			'singular' => true,
			'permission' => "page-edit"
		);
	}
	
	static public function getDefaultData() {
	   return array(
		   'crops' => 'thumbnail,100,100',
		   'cropOriginal' => 0
		   );
	}
	
	public function __construct() {
	   foreach(self::getDefaultData() as $key => $value) {
		   $this->$key = $value;
	   }
	}
	
	public function ___execute() {
		
		$this->config->scripts->add($this->config->urls->ProcessCropImage . "ProcessCropImage2.js");
		$this->config->styles->add($this->config->urls->ProcessCropImage . "ProcessCropImage2.css");
		
		$this->config->scripts->add($this->config->urls->ProcessCropImage . "Jcrop/js/jquery.Jcrop.min.js");
		$this->config->styles->add($this->config->urls->ProcessCropImage . "Jcrop/css/jquery.Jcrop.css");
		
		$this->setFuel('processHeadline', 'Crop images');
		
		$field = wire('sanitizer')->fieldName($this->input->get->field);

		if (preg_match("/_repeater[0-9]+$/", $field)) {
			$pages_id = (int) end(explode("_repeater", $field));
			$field = str_replace("_repeater$pages_id", "", $field);
		} else {
			$pages_id = (int) $this->input->get->pages_id;
		}

		$filename = wire('sanitizer')->name($this->input->get->filename);
		$height = (int) $this->input->get->height;
		$width = (int) $this->input->get->width;
		$prefix = wire('sanitizer')->name($this->input->get->prefix);
	
		if ($pages_id < 0 || strlen($filename) < 3) {
			$out = "<p class='description'>" . $this->_("This page only works when you come from image field.") . "</p>";
		} else {
			$page = wire('pages')->get($pages_id); 
			if(!$page->editable()) throw new WirePermissionException('Not Editable');
			$fieldValue = $page->get($field); 
			if(!$fieldValue || !$fieldValue instanceof Pageimages) throw new WireException("Invalid field"); 
			$img = $fieldValue->get("$filename");
			if(!$img) throw new WireException("Invalid file"); 
			$imageUrl = $img->url;
			$out = '';
			
			$out .= "<div id='hd'>";
			$showPreview = $this->_("Show preview?");
			$cropAndGo = $this->_("Crop and go");
			$out .= <<<FORM
<form method="POST" action="./save/?modal=1">
	<input type="hidden" name="filename" value="{$filename}" />
	<input type="hidden" name="field" value="{$field}" />
	<input type="hidden" name="pages_id" value="{$pages_id}" />
	<input type="hidden" name="width" value="{$width}" />
	<input type="hidden" name="height" value="{$height}" />
	<input type="hidden" name="prefix" value="{$prefix}" />
	<input type="hidden" id="x1" name="crop[x1]">
	<input type="hidden" id="y1" name="crop[y1]">
	<input type="hidden" id="w" name="crop[w]">
	<input type="hidden" id="h" name="crop[h]">
	<input type="checkbox" checked="checked" name="show_preview" id="show_preview" /><label for="show_preview">{$showPreview}</label>
	<button type="submit" class="ui-button ui-widget ui-corner-all head_button_clone ui-state-default" id="cropButton">{$cropAndGo}</button>
</form>		
FORM;
			$out .= "<p class='description'>" . sprintf($this->_('Click and drag the cropped area with your cursor. Cropped image will be resized to %s pixels'), '<b>' . $width . '</b>x<b>' . $height . '</b>') . "</p>";		
			$out .= "</div>";
	
			$out .= "<div id='bd'><img src='$imageUrl' data-width='{$width}' data-height='{$height}' id='jcrop_target' />";
			if ($width) $out .= "<div id='preview-container' style='overflow:hidden; height:{$height}px; width:{$width}px;'><img src='$imageUrl' id='preview' /></div>";
			$out .= "</div>";
		}
		
		return $out;
	}
	
	public function ___executeSave() {
	
		$this->config->styles->add($this->config->urls->ProcessCropImage . "ProcessCropImage2.css");
		
		$pages_id = (int) $this->input->post->pages_id;
		$filename = wire('sanitizer')->name($this->input->post->filename);
		$field = wire('sanitizer')->fieldName($this->input->post->field);
		$crop = $this->input->post->crop;
		if(!is_array($crop)) throw new WireException("Invalid crop value"); 
		foreach($crop as $k => $v) $crop[$k] = (int) $v; 
		$prefix = wire('sanitizer')->name($this->input->post->prefix);
		$targetWidth = (int) $this->input->post->width;
		$targetHeight = (int) $this->input->post->height;
		
		if (!$prefix) {
			$targetHeight = (int) $crop['h'];
			$targetWidth = (int) $crop['w'];
		}

		$page = wire('pages')->get($pages_id);
		if(!$page->id) throw new WireException("Invalid page"); 
		if(!$page->editable()) throw new WirePermissionException("Not Editable");

		$fieldValue = $page->get($field); 
		if(!$fieldValue || !$fieldValue instanceof Pagefiles) throw new WireException("Invalid field"); 

		$img = $fieldValue->get("$filename");
		if(!$img) throw new WireException("Invalid filename"); 
		$imagePath = $img->filename();

		if (strlen($prefix) > 1) {
			$targetPath = $fieldValue->path() . $prefix . '_' . $filename; 
			$targetUrl = $fieldValue->url() . $prefix . '_' . $filename;
		} else {
			$targetPath = $imagePath;
			$targetUrl = $img->url();
		}
		$jpeg_quality = 90;

		$p = pathinfo($filename); 
		$extension = strtolower($p['extension']); 
	
		switch($extension) {
			case 'gif': $img_r = imagecreatefromgif($imagePath); break;
			case 'png': $img_r = imagecreatefrompng($imagePath); break;
			case 'jpeg':
			case 'jpg': $img_r = imagecreatefromjpeg($imagePath); break;
		}
	
		$dst_r = ImageCreateTrueColor( $targetWidth, $targetHeight);
	
		imagecopyresampled($dst_r,$img_r,0,0,$crop['x1'],$crop['y1'],$targetWidth,$targetHeight,$crop['w'],$crop['h']);

		// write to file
		switch($extension) {
			case 'gif': 
				imagegif($dst_r,$targetPath); 
				break;
			case 'png': 
				// convert 1-100 (worst-best) scale to 0-9 (best-worst) scale for PNG 
				$quality = round(abs(($jpeg_quality - 100) / 11.111111)); 
				imagepng($dst_r,$targetPath,$quality); 
				break;
			case 'jpeg':
			case 'jpg': 
				imagejpeg($dst_r,$targetPath,$jpeg_quality); 
				break;
		}
		
		// Timestamp prevents browser cache, at least I hope so :)
		$timestamp = time();
		$out  = "<div id='results'><img src='{$targetUrl}?timestamp={$timestamp}' />";
		//$out .= "<ul><li><button class='ui-button ui-widget ui-corner-all head_button_clone ui-state-default' onclick=\"parent.$('.ui-dialog-content').dialog('close');\">Wow, that looks great!</button></li>";
		$out .= "<ul><li><button class='ui-button ui-widget ui-corner-all head_button_clone ui-state-default' onclick=\"window.close();\">" . $this->_("Wow, that looks great!") . "</button></li>";
		if ($prefix) $out .= "<li><a class='modal' href='../?filename={$filename}&prefix={$prefix}&width={$targetWidth}&height={$targetHeight}&pages_id={$pages_id}&field={$field}&modal=1'>" . $this->_("Not happy? Crop again!") . "</a></li>";
		$out .= "</ul></div>";
		return $out;
	}
	
	/**
	 * Build a form allowing configuration of this Module
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {
		
		$data = array_merge(self::getDefaultData(), $data);

		$fields = new InputfieldWrapper();
		$modules = Wire::getFuel('modules');
		
		/*
		 TODO: Should use Pageimage class for resizes when cropping original
		$f= $modules->get('InputfieldCheckbox');
		$f->name = "cropOriginal";
		$f->label = "EXPERIMENTAL: Allow cropping the original files";
		$f->description = "If checked, then it is possible to crop original image, not just thumbnails. Currently little hazardy and for testing only.";
		$f->value = 1; // providing a "checked" value for the checkbox is necessary
		$f->attr('checked', empty($data['cropOriginal']) ? '' : 'checked');
		$fields->append($f);
		*/
		
		/* OLD CONFIGURATION 
		$f = $modules->get('InputfieldTextarea');
		$f->attr('name', 'crops'); 
		$f->attr('rows', 5);
		$f->attr('value', $data['crops']); 
		$f->label = 'Crop setups';
		$f->description = 'Enter all crop dimensions, one on each line and in this format: name,width,height. Few examples: "thumbnail,200,200" or "portrait,200,600"'; 
		$fields->append($f);
		*/
		return $fields;
	}
	
	public function ___install() {
		parent::___install();
		
		$this->modules->get('FieldtypeCropImage');
		$this->modules->get('InputfieldCropImage');

		$p = new Page();
		$p->template = $this->templates->get("admin");
		$p->parent = $this->pages->get(3); // /admin/pages
		$p->title = 'Image crop';
		$p->name = 'image-crop';
		$p->process = $this;
		$p->save();
	}
	
	public function ___uninstall() {
		parent::___uninstall();
		
		$p = $this->pages->get(3)->children()->get('name=image-crop');
		if ($p->id) $p->delete();
		
		$p = $this->permissions->get('image-crop');
		if ($p->id) $p->delete();
	}
}
